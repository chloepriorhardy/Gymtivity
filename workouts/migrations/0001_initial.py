# Generated by Django 3.2.9 on 2021-11-11 15:11

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the exercise.', max_length=255, unique=True)),
                ('description', models.TextField(help_text='A long description of the exercise. Including a description of the proper form and any required equipment.')),
                ('source', models.URLField(blank=True, default='', help_text='A link to the source material.')),
            ],
        ),
        migrations.CreateModel(
            name='Interval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repeat', models.PositiveSmallIntegerField(default=1, help_text='The number of times each exercise scheme is to be performed.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('time_limit', models.DurationField(blank=True, default=datetime.timedelta, help_text='An optional time limit for the exercise.')),
                ('rest', models.DurationField(blank=True, default=datetime.timedelta, help_text='Optional post-interval rest period.')),
            ],
        ),
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the licence.', max_length=255)),
                ('notice', models.TextField(blank=True, default='', help_text='An optional notice do display with content covered by this licence.')),
                ('link', models.URLField(help_text='A link to the full licence terms.')),
            ],
        ),
        migrations.CreateModel(
            name='Workout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A name for the workout.', max_length=255, unique=True)),
                ('description', models.TextField(help_text='Describe the workout.')),
                ('rounds', models.PositiveSmallIntegerField(blank=True, default=1, help_text='The number of times each scheme is to be performed during this workout.', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('time_limit', models.DurationField(blank=True, default=datetime.timedelta, help_text='An optional time limit for the workout.')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A name for the style of workout. E.g. AMRAP.', max_length=255)),
                ('description', models.TextField(help_text='A longer description of this style of workout.')),
                ('quantity_name', models.CharField(choices=[('T', 'Time'), ('D', 'Distance'), ('W', 'Weight'), ('R', 'Repetitions'), ('A', 'Rate of work')], default='T', help_text='Name of the physical quantity that measures this style of workout.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='Date and time the workout was completed.')),
                ('user', models.ForeignKey(help_text='The user that completed the workout.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workout', models.ForeignKey(help_text='The workout complete during this session.', on_delete=django.db.models.deletion.CASCADE, to='workouts.workout')),
            ],
        ),
        migrations.CreateModel(
            name='Scheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reps', models.PositiveSmallIntegerField(blank=True, default=0, help_text='Optional number of reps to complete for this exercise.')),
                ('duration', models.DurationField(blank=True, default=datetime.timedelta, help_text='Optional duration of the exercise.')),
                ('distance', models.PositiveIntegerField(blank=True, default=0, help_text='Optional target distance for the exercise in meters.')),
                ('time_limit', models.DurationField(blank=True, default=datetime.timedelta, help_text='An optional time limit for the exercise.')),
                ('calories', models.PositiveIntegerField(blank=True, default=0, help_text='Target calorie count for the exercise.')),
                ('pace_one', models.DurationField(blank=True, default=datetime.timedelta, editable=False)),
                ('pace_two', models.DurationField(blank=True, default=datetime.timedelta, editable=False)),
                ('pace_three', models.DurationField(blank=True, default=datetime.timedelta, editable=False)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workouts.exercise')),
                ('interval', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workouts.interval')),
            ],
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performance', models.DecimalField(decimal_places=2, help_text='A measure of performance. Performance units depend on the style of the workout.', max_digits=20)),
                ('interval', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workouts.interval')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workouts.session')),
            ],
        ),
        migrations.CreateModel(
            name='MuscleGroupFeatures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calves', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target calves?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('quads', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the quadricepts?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Quadricepts')),
                ('hamstrings', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the hamstrings?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('gluteus', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the gluteus?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('Hips', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the hips?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('lower_back', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the lower back?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('lats', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the lats?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Latissimus dorsi')),
                ('traps', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the traps?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Trapezius')),
                ('abs', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the abs?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Abdominals')),
                ('pecs', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the pecs?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Pectorals')),
                ('delts', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the delts?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Deltoids')),
                ('triceps', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the triceps?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('biceps', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the biceps?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('forearms', models.DecimalField(decimal_places=1, default=0, help_text='How much does the exercise target the forearms?', max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('exercise', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='workouts.exercise')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.BooleanField()),
                ('timestamp', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workouts.workout')),
            ],
        ),
        migrations.AddField(
            model_name='interval',
            name='style',
            field=models.ForeignKey(help_text='The objective or measure of performance for this exercise interval.', on_delete=django.db.models.deletion.CASCADE, to='workouts.workoutstyle'),
        ),
        migrations.AddField(
            model_name='interval',
            name='workout',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workouts.workout'),
        ),
        migrations.AddField(
            model_name='exercise',
            name='licence',
            field=models.ForeignKey(help_text='The licence this exercise content is covered by.', on_delete=django.db.models.deletion.CASCADE, to='workouts.licence'),
        ),
    ]
